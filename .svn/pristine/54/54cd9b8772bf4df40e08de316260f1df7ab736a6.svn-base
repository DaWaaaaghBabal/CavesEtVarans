package sprite;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import animation.queue.AnimationQueue;
import animation.queue.AnimationQueueElement;

public class Sprite {

	public static final int[] UPPER_RIGHT = {1,-1};
	public static final int[] LOWER_RIGHT = {1,1};
	public static final int[] UPPER_LEFT = {-1,-1};
	public static final int[] LOWER_LEFT = {-1,1};
	
	public static final String IDLE = "Idle";

	private List<SpriteLayer> layers=new ArrayList<SpriteLayer>();
	
	private int Zindex;
	public int getZindex() {
		return Zindex;
	}
	public void setZindex(int zindex) {
		SpriteManager.getInstance().updateZindex(this, getZindex(), zindex);
		Zindex = zindex;
	}

	private String action;
	public String getAction() {
		return action;
	}
	public void setAction(String action){
		this.action=action;
		for(SpriteLayer sl : getLayers())
			sl.restart();
	}

	private int[] orientation;
	public int[] getOrientation() {
		return orientation;
	}
	public void setOrientation(int[] orientation) {
		this.orientation = orientation;
	}

	private float X;
	public float getX() {
		return X;
	}
	public void setX(float X) {
		this.X = X;
	}

	private float Y;
	public float getY() {
		return Y;
	}
	public void setY(float Y) {
		this.Y = Y;
	}

	// Sprites can be nested. A Sprite can be an assembly of any number of Sprites or SpriteLayers.
	// SpriteLayers are the "leaves" in a Sprite nesting tree.
	private Sprite container;
	public Sprite getContainer() {
		return container;
	}
	public void setContainer(Sprite container) {
		this.container = container;
	}
	
	private List<Sprite> children;
	public void addChild(Sprite sprite){
		children.add(sprite);
	}
	public void removeChild(Sprite sprite){
		children.remove(sprite);
	}
	
	public List<SpriteLayer> getLayers() {
		return layers;
	}
	public void setLayers(List<SpriteLayer> layers) {
		this.layers = layers;
	}
	
	// Constructor /////////////////////////////////////////////
	public Sprite(float x, float y){
		setLocation(x,y);
		setAnimationQueue(new AnimationQueue(this));
		getAnimationQueue().launchNextAnimation();
	}
	
	////////////////////////////////////////////////////////////
	
	public void setLocation(float x, float y){
		setX(x);
		setY(y);
	}
	public void move(float deltaX, float deltaY){
		X+=deltaX;
		Y+=deltaY;
	}

	public void addLayer(SpriteLayer sp){
		sp.setContainer(this);
		getLayers().add(sp);
	}

	public void paint(Graphics g){
		stepForward();
		for (SpriteLayer sl : getLayers()){
			sl.paint(g);
		}
	}
	
	public void stepForward(){
		for(SpriteLayer sl : getLayers()){
			sl.stepForward();
		}
	}

	// Click management
	public boolean isInside(Point point){
		for(SpriteLayer sl:getLayers()){
			if(sl.isInside(point))
				return true;
		}
		return false;
	}

	public void handleClick(MouseEvent event){
	}
	
	// Animation queue management
	private AnimationQueue animationQueue;
	public AnimationQueue getAnimationQueue() {
		return animationQueue;
	}
	public void setAnimationQueue(AnimationQueue animationQueue) {
		this.animationQueue = animationQueue;
	}
	
	public void animationTerminated() {
		boolean done = true;
		for(SpriteLayer sl : getLayers()){
			if(!sl.animationIsTerminated())
				done = false;
		}
		if(done){
			animationQueue.launchNextAnimation();
		}
	}
	
	public void addAnimationToQueue(String str, int[] orientation){
		getAnimationQueue().addQueueElement(new AnimationQueueElement(str, orientation));
	}
}
